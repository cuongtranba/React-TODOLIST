/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class TUserPosition : TBase
{
  private long _id;
  private long _createdAt;
  private long _userId;
  private TCompanyRef _companyRef;
  private int _startMonth;
  private int _startYear;
  private int _stopMonth;
  private int _stopYear;
  private string _position;
  private string _address;
  private TTown _town;
  private TCountry _country;
  private string _description;
  private string _businessLine;

  public long Id
  {
    get
    {
      return _id;
    }
    set
    {
      __isset.id = true;
      this._id = value;
    }
  }

  public long CreatedAt
  {
    get
    {
      return _createdAt;
    }
    set
    {
      __isset.createdAt = true;
      this._createdAt = value;
    }
  }

  public long UserId
  {
    get
    {
      return _userId;
    }
    set
    {
      __isset.userId = true;
      this._userId = value;
    }
  }

  public TCompanyRef CompanyRef
  {
    get
    {
      return _companyRef;
    }
    set
    {
      __isset.companyRef = true;
      this._companyRef = value;
    }
  }

  public int StartMonth
  {
    get
    {
      return _startMonth;
    }
    set
    {
      __isset.startMonth = true;
      this._startMonth = value;
    }
  }

  public int StartYear
  {
    get
    {
      return _startYear;
    }
    set
    {
      __isset.startYear = true;
      this._startYear = value;
    }
  }

  public int StopMonth
  {
    get
    {
      return _stopMonth;
    }
    set
    {
      __isset.stopMonth = true;
      this._stopMonth = value;
    }
  }

  public int StopYear
  {
    get
    {
      return _stopYear;
    }
    set
    {
      __isset.stopYear = true;
      this._stopYear = value;
    }
  }

  public string Position
  {
    get
    {
      return _position;
    }
    set
    {
      __isset.position = true;
      this._position = value;
    }
  }

  public string Address
  {
    get
    {
      return _address;
    }
    set
    {
      __isset.address = true;
      this._address = value;
    }
  }

  public TTown Town
  {
    get
    {
      return _town;
    }
    set
    {
      __isset.town = true;
      this._town = value;
    }
  }

  public TCountry Country
  {
    get
    {
      return _country;
    }
    set
    {
      __isset.country = true;
      this._country = value;
    }
  }

  public string Description
  {
    get
    {
      return _description;
    }
    set
    {
      __isset.description = true;
      this._description = value;
    }
  }

  public string BusinessLine
  {
    get
    {
      return _businessLine;
    }
    set
    {
      __isset.businessLine = true;
      this._businessLine = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool id;
    public bool createdAt;
    public bool userId;
    public bool companyRef;
    public bool startMonth;
    public bool startYear;
    public bool stopMonth;
    public bool stopYear;
    public bool position;
    public bool address;
    public bool town;
    public bool country;
    public bool description;
    public bool businessLine;
  }

  public TUserPosition() {
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I64) {
              Id = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I64) {
              CreatedAt = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I64) {
              UserId = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Struct) {
              CompanyRef = new TCompanyRef();
              CompanyRef.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I32) {
              StartMonth = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I32) {
              StartYear = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.I32) {
              StopMonth = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.I32) {
              StopYear = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.String) {
              Position = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.String) {
              Address = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.Struct) {
              Town = new TTown();
              Town.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 12:
            if (field.Type == TType.Struct) {
              Country = new TCountry();
              Country.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 13:
            if (field.Type == TType.String) {
              Description = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 14:
            if (field.Type == TType.String) {
              BusinessLine = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("TUserPosition");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.id) {
        field.Name = "id";
        field.Type = TType.I64;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Id);
        oprot.WriteFieldEnd();
      }
      if (__isset.createdAt) {
        field.Name = "createdAt";
        field.Type = TType.I64;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(CreatedAt);
        oprot.WriteFieldEnd();
      }
      if (__isset.userId) {
        field.Name = "userId";
        field.Type = TType.I64;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(UserId);
        oprot.WriteFieldEnd();
      }
      if (CompanyRef != null && __isset.companyRef) {
        field.Name = "companyRef";
        field.Type = TType.Struct;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        CompanyRef.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (__isset.startMonth) {
        field.Name = "startMonth";
        field.Type = TType.I32;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(StartMonth);
        oprot.WriteFieldEnd();
      }
      if (__isset.startYear) {
        field.Name = "startYear";
        field.Type = TType.I32;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(StartYear);
        oprot.WriteFieldEnd();
      }
      if (__isset.stopMonth) {
        field.Name = "stopMonth";
        field.Type = TType.I32;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(StopMonth);
        oprot.WriteFieldEnd();
      }
      if (__isset.stopYear) {
        field.Name = "stopYear";
        field.Type = TType.I32;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(StopYear);
        oprot.WriteFieldEnd();
      }
      if (Position != null && __isset.position) {
        field.Name = "position";
        field.Type = TType.String;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Position);
        oprot.WriteFieldEnd();
      }
      if (Address != null && __isset.address) {
        field.Name = "address";
        field.Type = TType.String;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Address);
        oprot.WriteFieldEnd();
      }
      if (Town != null && __isset.town) {
        field.Name = "town";
        field.Type = TType.Struct;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        Town.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (Country != null && __isset.country) {
        field.Name = "country";
        field.Type = TType.Struct;
        field.ID = 12;
        oprot.WriteFieldBegin(field);
        Country.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (Description != null && __isset.description) {
        field.Name = "description";
        field.Type = TType.String;
        field.ID = 13;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Description);
        oprot.WriteFieldEnd();
      }
      if (BusinessLine != null && __isset.businessLine) {
        field.Name = "businessLine";
        field.Type = TType.String;
        field.ID = 14;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(BusinessLine);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("TUserPosition(");
    bool __first = true;
    if (__isset.id) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Id: ");
      __sb.Append(Id);
    }
    if (__isset.createdAt) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("CreatedAt: ");
      __sb.Append(CreatedAt);
    }
    if (__isset.userId) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("UserId: ");
      __sb.Append(UserId);
    }
    if (CompanyRef != null && __isset.companyRef) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("CompanyRef: ");
      __sb.Append(CompanyRef== null ? "<null>" : CompanyRef.ToString());
    }
    if (__isset.startMonth) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("StartMonth: ");
      __sb.Append(StartMonth);
    }
    if (__isset.startYear) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("StartYear: ");
      __sb.Append(StartYear);
    }
    if (__isset.stopMonth) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("StopMonth: ");
      __sb.Append(StopMonth);
    }
    if (__isset.stopYear) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("StopYear: ");
      __sb.Append(StopYear);
    }
    if (Position != null && __isset.position) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Position: ");
      __sb.Append(Position);
    }
    if (Address != null && __isset.address) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Address: ");
      __sb.Append(Address);
    }
    if (Town != null && __isset.town) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Town: ");
      __sb.Append(Town== null ? "<null>" : Town.ToString());
    }
    if (Country != null && __isset.country) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Country: ");
      __sb.Append(Country== null ? "<null>" : Country.ToString());
    }
    if (Description != null && __isset.description) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Description: ");
      __sb.Append(Description);
    }
    if (BusinessLine != null && __isset.businessLine) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("BusinessLine: ");
      __sb.Append(BusinessLine);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}

