/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class TCurriculum : TBase
{
  private long _userId;
  private List<TUserEducation> _educations;
  private List<TUserPosition> _positions;
  private Dictionary<string, string> _extensions;
  private string _presentation;
  private string _hobbies;
  private string _cvId;
  private string _linkedInUrl;
  private string _viadeoUrl;
  private string _doYouBuzzUrl;
  private List<string> _additionalUrls;

  public long UserId
  {
    get
    {
      return _userId;
    }
    set
    {
      __isset.userId = true;
      this._userId = value;
    }
  }

  public List<TUserEducation> Educations
  {
    get
    {
      return _educations;
    }
    set
    {
      __isset.educations = true;
      this._educations = value;
    }
  }

  public List<TUserPosition> Positions
  {
    get
    {
      return _positions;
    }
    set
    {
      __isset.positions = true;
      this._positions = value;
    }
  }

  public Dictionary<string, string> Extensions
  {
    get
    {
      return _extensions;
    }
    set
    {
      __isset.extensions = true;
      this._extensions = value;
    }
  }

  public string Presentation
  {
    get
    {
      return _presentation;
    }
    set
    {
      __isset.presentation = true;
      this._presentation = value;
    }
  }

  public string Hobbies
  {
    get
    {
      return _hobbies;
    }
    set
    {
      __isset.hobbies = true;
      this._hobbies = value;
    }
  }

  public string CvId
  {
    get
    {
      return _cvId;
    }
    set
    {
      __isset.cvId = true;
      this._cvId = value;
    }
  }

  public string LinkedInUrl
  {
    get
    {
      return _linkedInUrl;
    }
    set
    {
      __isset.linkedInUrl = true;
      this._linkedInUrl = value;
    }
  }

  public string ViadeoUrl
  {
    get
    {
      return _viadeoUrl;
    }
    set
    {
      __isset.viadeoUrl = true;
      this._viadeoUrl = value;
    }
  }

  public string DoYouBuzzUrl
  {
    get
    {
      return _doYouBuzzUrl;
    }
    set
    {
      __isset.doYouBuzzUrl = true;
      this._doYouBuzzUrl = value;
    }
  }

  public List<string> AdditionalUrls
  {
    get
    {
      return _additionalUrls;
    }
    set
    {
      __isset.additionalUrls = true;
      this._additionalUrls = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool userId;
    public bool educations;
    public bool positions;
    public bool extensions;
    public bool presentation;
    public bool hobbies;
    public bool cvId;
    public bool linkedInUrl;
    public bool viadeoUrl;
    public bool doYouBuzzUrl;
    public bool additionalUrls;
  }

  public TCurriculum() {
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I64) {
              UserId = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.List) {
              {
                Educations = new List<TUserEducation>();
                TList _list5 = iprot.ReadListBegin();
                for( int _i6 = 0; _i6 < _list5.Count; ++_i6)
                {
                  TUserEducation _elem7;
                  _elem7 = new TUserEducation();
                  _elem7.Read(iprot);
                  Educations.Add(_elem7);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.List) {
              {
                Positions = new List<TUserPosition>();
                TList _list8 = iprot.ReadListBegin();
                for( int _i9 = 0; _i9 < _list8.Count; ++_i9)
                {
                  TUserPosition _elem10;
                  _elem10 = new TUserPosition();
                  _elem10.Read(iprot);
                  Positions.Add(_elem10);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Map) {
              {
                Extensions = new Dictionary<string, string>();
                TMap _map11 = iprot.ReadMapBegin();
                for( int _i12 = 0; _i12 < _map11.Count; ++_i12)
                {
                  string _key13;
                  string _val14;
                  _key13 = iprot.ReadString();
                  _val14 = iprot.ReadString();
                  Extensions[_key13] = _val14;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.String) {
              Presentation = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.String) {
              Hobbies = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.String) {
              CvId = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.String) {
              LinkedInUrl = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.String) {
              ViadeoUrl = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.String) {
              DoYouBuzzUrl = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.List) {
              {
                AdditionalUrls = new List<string>();
                TList _list15 = iprot.ReadListBegin();
                for( int _i16 = 0; _i16 < _list15.Count; ++_i16)
                {
                  string _elem17;
                  _elem17 = iprot.ReadString();
                  AdditionalUrls.Add(_elem17);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("TCurriculum");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.userId) {
        field.Name = "userId";
        field.Type = TType.I64;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(UserId);
        oprot.WriteFieldEnd();
      }
      if (Educations != null && __isset.educations) {
        field.Name = "educations";
        field.Type = TType.List;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, Educations.Count));
          foreach (TUserEducation _iter18 in Educations)
          {
            _iter18.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (Positions != null && __isset.positions) {
        field.Name = "positions";
        field.Type = TType.List;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, Positions.Count));
          foreach (TUserPosition _iter19 in Positions)
          {
            _iter19.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (Extensions != null && __isset.extensions) {
        field.Name = "extensions";
        field.Type = TType.Map;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.String, TType.String, Extensions.Count));
          foreach (string _iter20 in Extensions.Keys)
          {
            oprot.WriteString(_iter20);
            oprot.WriteString(Extensions[_iter20]);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (Presentation != null && __isset.presentation) {
        field.Name = "presentation";
        field.Type = TType.String;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Presentation);
        oprot.WriteFieldEnd();
      }
      if (Hobbies != null && __isset.hobbies) {
        field.Name = "hobbies";
        field.Type = TType.String;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Hobbies);
        oprot.WriteFieldEnd();
      }
      if (CvId != null && __isset.cvId) {
        field.Name = "cvId";
        field.Type = TType.String;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(CvId);
        oprot.WriteFieldEnd();
      }
      if (LinkedInUrl != null && __isset.linkedInUrl) {
        field.Name = "linkedInUrl";
        field.Type = TType.String;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(LinkedInUrl);
        oprot.WriteFieldEnd();
      }
      if (ViadeoUrl != null && __isset.viadeoUrl) {
        field.Name = "viadeoUrl";
        field.Type = TType.String;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(ViadeoUrl);
        oprot.WriteFieldEnd();
      }
      if (DoYouBuzzUrl != null && __isset.doYouBuzzUrl) {
        field.Name = "doYouBuzzUrl";
        field.Type = TType.String;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(DoYouBuzzUrl);
        oprot.WriteFieldEnd();
      }
      if (AdditionalUrls != null && __isset.additionalUrls) {
        field.Name = "additionalUrls";
        field.Type = TType.List;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.String, AdditionalUrls.Count));
          foreach (string _iter21 in AdditionalUrls)
          {
            oprot.WriteString(_iter21);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("TCurriculum(");
    bool __first = true;
    if (__isset.userId) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("UserId: ");
      __sb.Append(UserId);
    }
    if (Educations != null && __isset.educations) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Educations: ");
      __sb.Append(Educations);
    }
    if (Positions != null && __isset.positions) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Positions: ");
      __sb.Append(Positions);
    }
    if (Extensions != null && __isset.extensions) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Extensions: ");
      __sb.Append(Extensions);
    }
    if (Presentation != null && __isset.presentation) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Presentation: ");
      __sb.Append(Presentation);
    }
    if (Hobbies != null && __isset.hobbies) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Hobbies: ");
      __sb.Append(Hobbies);
    }
    if (CvId != null && __isset.cvId) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("CvId: ");
      __sb.Append(CvId);
    }
    if (LinkedInUrl != null && __isset.linkedInUrl) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("LinkedInUrl: ");
      __sb.Append(LinkedInUrl);
    }
    if (ViadeoUrl != null && __isset.viadeoUrl) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("ViadeoUrl: ");
      __sb.Append(ViadeoUrl);
    }
    if (DoYouBuzzUrl != null && __isset.doYouBuzzUrl) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("DoYouBuzzUrl: ");
      __sb.Append(DoYouBuzzUrl);
    }
    if (AdditionalUrls != null && __isset.additionalUrls) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("AdditionalUrls: ");
      __sb.Append(AdditionalUrls);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}

